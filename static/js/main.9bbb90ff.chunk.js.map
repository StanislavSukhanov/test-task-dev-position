{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ProductItem","_ref","product","imageUrl","backgroundImage","concat","img","console","log","react_default","a","createElement","key","asin","className","style","brand","price","currency","name","onClick","window","open","link","ProductList","_ref2","productItems","products","map","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","error","_this2","fetch","then","response","json","result","setState","_this$state","message","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mLCKxC,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,QACdC,EAAW,CACfC,gBAAe,OAAAC,OAAUH,EAAQI,IAAlB,MAGjB,OADAC,QAAQC,IAAIL,GAEVM,EAAAC,EAAAC,cAAA,MAAIC,IAAKV,EAAQW,MACfJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBAAgBC,MAAOZ,IACtCM,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,gCAAuBF,EAAAC,EAAAC,cAAA,cAAST,EAAQc,OAAxC,cAAkEP,EAAAC,EAAAC,cAAA,cAAST,EAAQe,MAAjB,IAAyBf,EAAQgB,UAAnG,KAA6HT,EAAAC,EAAAC,cAAA,WAC7HF,EAAAC,EAAAC,cAAA,YAAOT,EAAQiB,MAFjB,IAE8BV,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACjCF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,YAAYM,QAAS,kBAAKC,OAAOC,KAAKpB,EAAQqB,QAA9D,kBAMR,SAASC,EAATC,GAAmC,IAC3BC,EAD2BD,EAAZE,SACSC,IAAI,SAAA1B,GAChC,OAAOO,EAAAC,EAAAC,cAACX,EAAD,CAAaE,QAASA,MAI/B,OADAK,QAAQC,IAAI,UAAWkB,GAChBjB,EAAAC,EAAAC,cAAA,UAAKe,OA4DCG,cAxDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAU,EACVZ,SAAU,GACVa,MAAO,MALQT,mFASC,IAAAU,EAAAP,KAClBQ,MAAM,4CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJvC,QAAQC,IAAIsC,GACZL,EAAKM,SAAS,CACZR,UAAU,EACVZ,SAAUmB,EAAOnB,YAGnB,SAAAa,GACEC,EAAKM,SAAS,CACZR,UAAU,EACVC,6CAMD,IAAAQ,EAC+Bd,KAAKI,MAAnCC,EADDS,EACCT,SAAUZ,EADXqB,EACWrB,SAAUa,EADrBQ,EACqBR,MAC5B,OAAIA,EAEA/B,EAAAC,EAAAC,cAAA,qBAAa6B,EAAMS,SAEXV,EAIR9B,EAAAC,EAAAC,cAACa,EAAD,CAAaG,SAAUA,IAHlBlB,EAAAC,EAAAC,cAAA,gCApCKuC,aCnBEC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.9bbb90ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nfunction ProductItem({product}){\n  const imageUrl = {\n    backgroundImage : `url(${product.img})`\n  }\n  console.log(imageUrl);\n  return(\n    <li key={product.asin}>\n      <div className=\"product-image\" style={imageUrl}></div>\n      <div className=\"product-info\">\n        <span>Manufactured by: <strong>{product.brand}</strong>  |  Pice: <strong>{product.price} {product.currency}</strong> </span><br/>\n        <span>{product.name}</span> <br/><br/>\n        <span className=\"more-info\" onClick={()=> window.open(product.link)}>Show more...</span>\n      </div>\n    </li>\n  )\n}\n\nfunction ProductList({ products }) {\n  const productItems = products.map(product => {\n    return <ProductItem product={product}/>\n  }\n  );\n  console.log(\"items: \", productItems);\n  return <ul>{productItems}</ul>\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false, // to track ajax request status\n      products: [], // to store the list of products\n      error: null // to store an error if any\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://demo3907346.mockable.io/products\")\n      .then(response => response.json())\n      .then(result => {\n        console.log(result)\n        this.setState({\n          isLoaded: true,\n          products: result.products,\n        });\n      },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { isLoaded, products, error } = this.state;\n    if (error) {\n      return (\n        <div>Error: {error.message}</div>\n      )\n    } else if (!isLoaded) {\n      return <div>Loading...</div>\n    } else {\n      return (\n        <ProductList products={products} />\n      )\n      //   {/* <div>\n      //     <div>products: </div>\n      //     <ul>\n      //       {\n      //         products.map(product => {\n      //           return <li>{product.name} {product.price}</li>\n      //         })\n      //       }\n      //     </ul>\n      //   </div> */}\n      // )\n    }\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}